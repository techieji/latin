make_all = fn l -> mapping(builtins.zip(["nom", "gen", "dat", "acc", "abl"], l)) endfn

first_decl = {
	sing = make_all(["!", "%ae", "%ae", "%am", "%ā"])
	plur = make_all(["%ae", "%ārum", "%īs", "%ās", "%īs"])
}

second_decl = {
	sing = make_all(["!", "%ī", "%ō", "%um", "%ō"])
	plur = make_all(["%ī", "%ōrum", "%īs", "%ōs", "%īs"])
}

second_decl_neuter = {
	sing = second_decl.sing
	plur = builtins.inherit(second_decl.plur, {
		nom = "%a"
		acc = "%a"
	})
}

third_decl = {
	sing = make_all(["!", "%is", "%ī", "%em", "%e"])
	plur = make_all(["%ēs", "%um", "%ibus", "%ēs", "%ibus"])
}

third_decl_neuter = {
	sing = builtins.inherit(third_decl.sing, { acc = "!" })
	plur = builtins.inherit(third_decl.plur, { nom = acc = "%a" })
}

third_decl_weak_i_stem = {
	sing = third_decl.sing
	plur = builtins.inherit(third_decl.plur, { gen = "%ium" })
}

third_decl_strong_i_stem = {
	sing = builtins.inherit(third_decl_neuter.sing, { abl = "%ī" })
	plur = builtins.inherit(third_decl_weak_i_stem.plur, { nom = acc = "%ia" })
}

# Exported functions
num_to_wordset_set = {
	"1" = first_decl
	"2" = second_decl
	"2n" = second_decl_neuter
	"3" = third_decl
	"3n" = third_decl_neuter
	"3i" = third_decl_weak_i_stem
	"3I" = third_decl_strong_i_stem
}
get_form = fn decl, case, number -> num_to_wordset_set.{decl}.{number}.{case} endfn
